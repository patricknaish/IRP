@inproceedings{Almonaies2010,
abstract = {Abstract. Although Service-Oriented Architecture (SOA) has become popular in recent years, the majority of legacy systems are still not SOA enabled. The increase in the amount of information that companies must handle has resulted in a considerable increase in the complexity of the legacy systems that store this information. While moving to a serviceoriented architecture platform can help in handling this increase, at the same time it is important to preserve the investment of many years of tuning and debugging of the legacy assets as much as possible. Several techniques exist for modernizing legacy systems towards service-oriented architecture. In this paper we present a survey of the various approaches to moving legacy systems to the SOA environment. We discuss the various approaches and methods and highlight their strengths and weaknesses, with an eye to assisting the decision process when undertaking a new modernization project.},
author = {Almonaies, A and Cordy, James and Dean, Thomas},
booktitle = {International Workshop on SOA Migration and Evolution (SOAME 2010)},
file = {:C$\backslash$:/Users/Patrick/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Almonaies, Cordy, Dean - 2010 - Legacy system evolution towards service-oriented architecture.pdf:pdf},
keywords = {legacy systems,migration,redevelopment,soa,wrapping},
pages = {53--62},
title = {{Legacy system evolution towards service-oriented architecture}},
url = {http://serviceorientedarchitecturesoa.net/goto/http://research.cs.queensu.ca/home/cordy/Papers/ACD\_MigToSOA\_SOAME10.pdf},
year = {2010}
}
@article{Aversano2001,
abstract = {A key to successfully moving to the Internet while salvaging past
investments in centralised, mainframe-oriented software development is
migrating core legacy applications towards Web-enabled client-server
architectures. This paper presents the main results and lessons learned
from a migration project aimed at integrating an existing COBOL system
into a Web-enabled infrastructure. The original system has been
decomposed into its user interface and server (application logic and
database) components. The user interface has been migrated into a Web
browser shell using Microsoft Active Server Pages (ASP) and VBScript.
The server component has been wrapped with dynamic load libraries
written in Microfocus Object COBOL, loaded into Microsoft Internet
Information Server (IIS), and accessed by the ASP pages},
author = {Aversano, L. and Canfora, G. and Cimitile, A. and Lucia, A. De},
doi = {10.1109/.2001.914979},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/00914979.pdf:pdf},
isbn = {0-7695-1028-0},
journal = {Proceedings Fifth European Conference on Software Maintenance and Reengineering},
title = {{Migrating legacy systems to the Web: an experience report}},
year = {2001}
}
@article{Bodhuin2002,
abstract = {Integrating legacy Cobol systems into a Web-based architecture is a complex and challenging task. Cobol is not a distributed and object-oriented language, however its integration with other languages or distributed systems is a prerequisite for achieving migration towards Web technologies. Moreover, the user interface and user interaction modalities need to be changed. Numerous strategies have been proposed for wrapping the business logic and re-implementing the user interface, but there is still a great need for experimental research. This paper presents a migration strategy whose target system is a Web-enabled architecture based on the model-view-controller (MVC) design pattern. By extracting all the needed information from the Cobol source code, the realized toolkit can automatically generate wrappers for the business logic and the data model and the Web user interface as Java server pages. The strategy and the toolkit presented have been defined within the project M\&amp;S SW, a research project aimed at defining new technological solutions to be transferred to small and medium enterprises operating in information and communication technologies.},
author = {Bodhuin, T. and Guardabascio, E. and Tortorella, M.},
doi = {10.1109/WCRE.2002.1173090},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/01173090.pdf:pdf},
isbn = {0-7695-1799-4},
issn = {1095-1350},
journal = {Ninth Working Conference on Reverse Engineering, 2002. Proceedings.},
title = {{Migrating COBOL systems to the Web by using the MVC design pattern}},
year = {2002}
}
@article{Canfora2006,
abstract = {Migration of form based legacy systems towards service-oriented computing is a challenging task, requiring the adaptation of the legacy interface to the interaction paradigm of Web services. In this paper, a wrapping methodology is proposed to make interactive functionalities of legacy systems accessible as Web services. The wrapper that is used for interacting with the legacy system acts as an interpreter of a finite state automaton that describes the model of the interaction between user and legacy system. This model is obtained by black box reverse engineering techniques. A migration process and a software architecture that allow a functionality of a legacy system to be exported as a Web service are presented in the paper},
author = {Canfora, G. and Fasolino, A.R. and Frattolillo, G. and Tramontana, P.},
doi = {10.1109/CSMR.2006.34},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/01602355.pdf:pdf},
isbn = {0-7695-2536-9},
issn = {1052-8725},
journal = {Conference on Software Maintenance and Reengineering (CSMR'06)},
title = {{Migrating interactive legacy systems to Web services}},
year = {2006}
}
@article{Canfora2000,
abstract = {A solution to the problem of salvaging the past investments in centralized, mainframe-oriented software development, while keeping competitive in the dynamic business world, consists of migrating legacy systems towards more modern environments, in particular client-server platforms. However, a migration process entails costs and risks that depend on the characteristics of both the architecture of the source system and the target client-server platform. We propose an approach to program decomposition as a preliminary step for the migration of legacy systems. A program slicing algorithm is defined to identify the statements implementing the user interface component. An interactive re-engineering tool is also presented that supports the software engineer in the comprehension of the source code during the decomposition of a program. The focus of this paper is on the partition of a legacy system, while issues related to the re-engineering, encapsulation, and wrapping of the legacy components and to the definition of the middleware layer through which they communicate are not tackled.},
author = {Canfora, Gerardo and Cimitile, Aniello and {De Lucia}, Andrea and {Di Lucca}, Giuseppe A.},
doi = {10.1016/S0164-1212(00)00030-3},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/00693336.pdf:pdf},
isbn = {0-8186-8560-3},
issn = {01641212},
journal = {Journal of Systems and Software},
pages = {99--110},
title = {{Decomposing legacy programs: A first step towards migrating to client-server platforms}},
volume = {54},
year = {2000}
}
@article{Canfora2008,
abstract = {Software systems modernisation using Service Oriented Architectures (SOAs) and Web Services represents a valuable option for extending the lifetime of mission-critical legacy systems. This paper presents a black-box modernisation approach for exposing interactive functionalities of legacy systems as Services. The problem of transforming the original user interface of the system into the request/response interface of a SOA is solved by a wrapper that is able to interact with the system on behalf of the user. The wrapper behaviour is defined in the form of Finite State Machines retrievable by black-box reverse engineering of the human-computer interface. The paper describes our wrapper-based migration process and discusses the results of case studies showing process effectiveness and quality of resulting services. Â© 2007 Elsevier Inc. All rights reserved.},
author = {Canfora, Gerardo and Fasolino, Anna Rita and Frattolillo, Gianni and Tramontana, Porfirio},
doi = {10.1016/j.jss.2007.06.006},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/1-s2.0-S0164121207001380-main.pdf:pdf},
isbn = {01641212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Legacy system migration,Legacy system wrapping,Service Oriented Architecture,Web Service},
pages = {463--480},
title = {{A wrapping approach for migrating legacy system interactive functionalities to Service Oriented Architectures}},
volume = {81},
year = {2008}
}
@article{Ceccato2010,
abstract = {Legacy information systems, such as banking systems, are usually$\backslash$norganized around their data model. Hence, when these systems are$\backslash$nmigrated to modern environments, translation of the data model involves$\backslash$nthe most critical decisions, having strong implications on the rest of$\backslash$nthe translation. In this paper, we report our experience and describe$\backslash$nthe approaches adopted in migrating a large banking system (ten million$\backslash$nlines of code) to Java, starting from a proprietary data model which$\backslash$ngives programmers explicit control of the variable overlay in memory.$\backslash$nAfter presenting the basic translation scheme, we discuss the exceptions$\backslash$nthat may occur in practice. Then, we consider two heuristic approaches$\backslash$nuseful to reduce the number of cases where a behavior equivalent to that$\backslash$nof unions must be reproduced in Java. Finally, we comment on the$\backslash$nexperimental results obtained so far. Copyright (C) 2009 John Wiley \&$\backslash$nSons, Ltd.},
author = {Ceccato, Mariano and Dean, Thomas Roy and Tonella, Paolo and Marchignoli, Davide},
doi = {10.1002/smr.418},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/418\_ftp.pdf:pdf},
isbn = {1532060X$\backslash$n15320618},
issn = {1532-060X},
journal = {JOURNAL OF SOFTWARE MAINTENANCE AND EVOLUTION-RESEARCH AND PRACTICE},
keywords = {reverse engineering; legacy systems migration; obj},
pages = {211--237},
title = {{Migrating legacy data structures based on variable overlay to Java}},
volume = {22},
year = {2010}
}
@misc{Chiang2001,
abstract = {With the advent and widespread use of object-oriented and clientâserver technologies, companies expect their legacy systems, developed for the centralized environment, to take advantage of these new technologies and also cooperate with their heterogeneous environments. An alternative to migrating legacy systems from the mainframe to a user-centered, distributed object computing, and clientâserver platform is to wrap the legacy systems on the mainframe and expose the interfaces of the legacy systems to the remote clients. The enabling middleware technologies such as Common Object Request Broker Architecture (CORBA), Component Object Model/Distributed Component Object Model (COM/DCOM), and Java \{RMI\} make the migration of the legacy systems to a heterogeneous distributed computing environment possible. In this paper, we present an approach and practical experience for integrating the legacy systems to a heterogeneous distributed computing environment by adopting the \{CORBA\} technology. It has been reported quite often that an approach like this will improve system maintainability, portability, and interoperability. We also illustrate this approach with an industrial project. The project is viewed as a reengineering effort where a centralized reengineering system is wrapped to operate in a heterogeneous distributed computing environment by leveraging \{CORBA\} technology. The reengineering approach is a combination of redesign and simple facelift. The resulting legacy integration architecture through the application of the approach is evaluated using the equality attributes proposed by Bass, Clements, and Kazman. },
author = {Chiang, Chia-Chu},
booktitle = {Information and Software Technology},
doi = {10.1016/S0950-5849(01)00160-4},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/1-s2.0-S0950584901001604-main.pdf:pdf},
isbn = {1160284040},
issn = {09505849},
pages = {497--507},
title = {{Wrapping legacy systems for use in heterogeneous computing environments}},
volume = {43},
year = {2001}
}
@article{Deursen1998,
author = {Deursen, Arie Van and Moonen, Leon},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/wcre1998.pdf:pdf},
journal = {Reverse Engineering, 1998. \ldots},
keywords = {5th ieee working confer-,98,analysis,and phrases,ence on reverse engineering,note,october 12-14,program,software maintenance,to appear in proceedings,variable usage,wcre,year 2000 problem},
title = {{Type inference for COBOL systems}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=723192},
year = {1998}
}
@article{Duncan1996,
abstract = {This paper summarizes many cost-benefit issues addressed by Telogy Inc. in its decision to replace its legacy mainframe computer system with a Client/Server system as a major component of re-engineering the entire organization, Lessons learned are intended to benefit decision makers in assessing the feasibility of migrating their current operations to a Client/Server environment, This paper summarizes what Telogy Inc, experienced during and after conversion of its centralized mainframe computer system to a distributed, Client/Server environment, Issues addressed include reasons for the migration, comparison of mainframe and Client/Server systems, outsourcing, cost-benefit considerations, productivity impact, roles of vendors and users, training, responsibility for data synchronization, and software maintenance, Lessons learned address: (1) overcoming resistance to change, (2) managing user data during conversion, (3) involving users in the migration, and (4) linking migration success with management and employee performance appraisal and compensation.},
author = {Duncan, D G and Lele, S B},
doi = {10.1002/(sici)1096-908x(199609)8:5<321::aid-smr135>3.0.co;2-4},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/(SICI)1096-908X(199609)8-5-321--AID-SMR135-3.0.pdf:pdf},
isbn = {1040-550X},
journal = {Journal of Software Maintenance-Research and Practice},
pages = {321--344},
title = {{Converting from mainframe to Client/Server at Telogy Inc}},
url = {<Go to ISI>://WOS:A1996VU42600005},
volume = {8},
year = {1996}
}
@article{Geet2009,
abstract = {Over the last decade, numerous techniques have been proposed in the literature to reverse engineer large legacy systems, several of them even claiming success on industrial scale. Consequently, when faced with a reverse engineering request from a large banking company, we decided to reuse an existing technique (namely, feature location using formal concept analysis on execution profiles) and see whether we could replicate their results. This paper reports our experience with such a replication experiment: we list those things that worked well (and fortunately, there were quite a few) and those things that did not work so well (and try to identify root causes and solutions for the problems we encountered).},
author = {Geet, J. Van and Demeyer, S.},
doi = {10.1109/ICSM.2009.5306312},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/05306312.pdf:pdf},
isbn = {978-1-4244-4897-5},
issn = {1063-6773},
journal = {2009 IEEE International Conference on Software Maintenance},
title = {{Feature location in COBOL mainframe systems: An experience report}},
year = {2009}
}
@article{Koschel2009,
author = {Koschel, Arne and Kleiner, Carsten and Astrova, Irina},
doi = {10.1109/ComputationWorld.2009.13},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/05359601.pdf:pdf},
isbn = {978-1-4244-5166-1},
journal = {2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},
keywords = {- service-oriented architecture,experiences,integration,legacy,mainframe},
month = nov,
pages = {298--301},
publisher = {Ieee},
title = {{Mainframe Application Modernization Based on Service-Oriented Architecture}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5359601},
year = {2009}
}
@article{Lammel2005,
address = {New York, New York, USA},
author = {L\"{a}mmel, Ralf and {De Schutter}, Kris},
doi = {10.1145/1052898.1052907},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/download.pdf:pdf},
isbn = {1595930434},
journal = {Proceedings of the 4th international conference on Aspect-oriented software development - AOSD '05},
keywords = {aspect-oriented programming,business programming,cobol},
pages = {99--110},
publisher = {ACM Press},
title = {{What does aspect-oriented programming mean to Cobol?}},
url = {http://portal.acm.org/citation.cfm?doid=1052898.1052907},
year = {2005}
}
@article{Leroux2006,
abstract = {Compared to conventional processors, multicore chips offer a significant boost in processing capacity while consuming less power and less board space. But before migrating to multicore hardware, systems designers and software developers must choose a multiprocessing model that can maximize performance gains while minimizing modifications to existing software assets.},
author = {Leroux, By Paul and Craig, Robert},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/QNX.Sum06.pdf:pdf},
journal = {Control},
keywords = {multicore,multicore migration},
title = {{Migrating legacy applications to multicore processors}},
url = {http://www.mil-embedded.com/pdfs/QNX.Sum06.pdf},
year = {2006}
}
@article{Lewis2006,
abstract = {An effective way of leveraging the value of legacy systems is to expose their functionality, or subsets of it, as services. In the business world, this has become a very popular approach because it allows underlying systems to remain largely unchanged, while exposing functionality to a larger number of clients through well-defined service interfaces. The U.S. Department of Defense (DoD) is also adopting this approach by defining service-oriented architectures (SOAs) that include a set of infrastructure common services on which organizations can build additional domain services or applications. When legacy systems or components are to be used as the foundation for domain services, there must be an analysis of how to convert the functionality in existing systems into services. This analysis should consider the specific interactions that is required by the SOA and any changes that need to be made to the legacy components. We have recently helped an organization evaluate the potential for converting components of an existing system into services that would run in a new and tightly constrained DoD SOA environment. This paper describes the process that was used and outlines several issues that need to be addressed in making similar migrations},
author = {Lewis, G. and Morris, E. and Smith, D.},
doi = {10.1109/CSMR.2006.9},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/01602354.pdf:pdf},
isbn = {0-7695-2536-9},
issn = {1052-8725},
journal = {Conference on Software Maintenance and Reengineering (CSMR'06)},
title = {{Analyzing the reuse potential of migrating legacy components to a service-oriented architecture}},
year = {2006}
}
@article{Lucia1997,
abstract = {Presents an approach to migrate legacy systems to object-oriented
platforms. The process consists of six sequential phases and encompasses
reverse engineering and re-engineering activities. The aim of the
reverse engineering phases is to decompose programs into components
implementing user interface management and components implementing
application domain objects. The identification of objects is centred
around a persistent data store and exploits object-oriented design
metrics. Wrapping techniques are the core of the re-engineering
activities. They make new systems able to exploit existing resources,
thus allowing an incremental and selective translation of the identified
objects},
author = {Lucia, A. De and Lucca, G.A. Di and Fasolino, A.R. and Guerra, P. and Petruzzelli, S.},
doi = {10.1109/ICSM.1997.624238},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/05726942.pdf:pdf},
isbn = {0-8186-8013-X},
issn = {1063-6773},
journal = {Proceedings International Conference on Software Maintenance},
title = {{Migrating legacy systems towards object-oriented platforms}},
year = {1997}
}
@article{Sneed2011,
author = {Sneed, H},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/05609583.pdf:pdf},
isbn = {9781424486281},
journal = {IEEE Proc. of European Conference on Software \ldots},
keywords = {-legacy systems,appealing to migrate the,but the implementation is,cobol,cobol systems over into,code,java,key words,migration,not so obvious,strategy is obvious,the,transformation},
title = {{Migrating from COBOL to Java--a Report from the Field}},
url = {http://scholar.google.com/scholar?hl=en\&btnG=Search\&q=intitle:Migrating+from+COBOL+to+Java+A+Report+from+the+Field\#3 http://scholar.google.com/scholar?hl=en\&btnG=Search\&q=intitle:Migrating+from+COBOL+to+Java--a+Report+from+the+Field\#2},
year = {2011}
}
@article{Sneed2008,
abstract = {This paper describes a tool set for constructing web services from existing main frame COBOL programs. The first tool - COBAudit - is intended to identify candidates for web services. The second tool - COBStrip - serves to extract only that portion of the code required to fulfill the service. The third tool - COBWrap - wraps the code extracted from original code and converts it to an executable component. The fourth tool - COBLink - connects the wrapped component to the web by generating a WSDL interface. The tools are currently under test within a project for a German financial service with an insurance system of 25 million lines of COBOL code running under IMS on the IBM mainframe.},
author = {Sneed, H.M.},
doi = {10.1109/WSE.2008.4655391},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/04655391.pdf:pdf},
isbn = {978-1-4244-2790-1},
issn = {1550-4441},
journal = {2008 10th International Symposium on Web Site Evolution},
keywords = {COBOL,Code,Legacy Systems,Migration,Stripping,Web services,Wrapping},
title = {{COB2WEB a toolset for migrating to web services}},
year = {2008}
}
@misc{Sneed2009,
abstract = {This paper describes a pilot project conducted to test the feasibility of constructing web services from existing mainframe COBOL programs. The project involved the use of four tools. The first tool, COBAudit, was intended to identify candidates for web services. The second tool, COBStrip, served to extract only that portion of the code required to fulfill the service. The third tool, COBWrap, wrapped the code extracted from original code and converted it to an executable component. The fourth tool, COBLink, connected the wrapped component to the web by generating a WSDL interface from either the COBOL linkage section or the original map definition. The tools were applied to a legacy life insurance system with more than 20 million lines of COBOL code running under IMS on the IBM mainframe. [ABSTRACT FROM AUTHOR] Copyright of International Journal on Software Tools for Technology Transfer is the property of Springer Science \& Business Media B.V. and its content may not be copied or emailed to multiple sites or posted to a listserv without the copyright holder's express written permission. However, users may print, download, or email articles for individual use. This abstract may be abridged. No warranty is given about the accuracy of the copy. Users should refer to the original published version of the material for the full abstract. (Copyright applies to all Abstracts.)},
author = {Sneed, Harry M.},
booktitle = {International Journal on Software Tools for Technology Transfer},
doi = {10.1007/s10009-009-0128-z},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/art\%3A10.1007\%2Fs10009-009-0128-z.pdf:pdf},
isbn = {14332779},
issn = {1433-2779},
pages = {441--451},
pmid = {45506666},
title = {{A pilot project for migrating COBOL code to web services}},
volume = {11},
year = {2009}
}
@inproceedings{Sneed2013,
abstract = {This paper describes an industrial project aimed at migrating legacy COBOL programs running on an IBM-AS400 to Java for running in an open environment. The unique aspect of this migration is the reengineering of the COBOL code prior to migration. The programs were in their previous form hardwired to the AS400 screens as well as to the AS400 file system. The goal of the reengineering project was to free the code from these proprietary dependencies and to reduce them to the pure business logic. Disentangling legacy code from it's physical environment is a major prerequisite to converting that code to another environment. The goal is the virtualization of program interfaces. That was accomplished here in a multistep automated process which led to small, environment independent COBOL modules which could be readily converted over into Java packages. The pilot project has been completed for a sample subset of the production planning and control system. The conversion to Java is pending the test of the reengineered COBOL modules.},
author = {Sneed, Harry M. and Erdoes, Katalin},
booktitle = {2013 17th European Conference on Software Maintenance and Reengineering},
doi = {10.1109/CSMR.2013.32},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/06498471.pdf:pdf},
isbn = {978-0-7695-4948-4},
pages = {231--240},
title = {{Migrating AS400-COBOL to Java: A Report from the Field}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6498471},
year = {2013}
}
@article{Sneed1996,
author = {Sneed, HM},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/00558885.pdf:pdf},
isbn = {0818676744},
journal = {Reverse Engineering, 1996., Proceedings of the \ldots},
pages = {104--119},
title = {{Encapsulating legacy software for use in client/server systems}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=558885},
year = {1996}
}
@article{Wu2005,
abstract = { During the last three decades, a considerable amount of software has been developed based on obsolete technologies (such as using procedural languages). This type of systems has undergone severe code revisions during a long time period. As a consequence, the high level of entropy combined with imprecise documentation about the design and architecture make the maintenance more difficult, time consuming, and costly. On the other hand, these systems have important economical value; many of them are crucial to their owners (Bennett, 1995). For the high cost of lost former investment and business knowledge that embedded in those systems, in many cases, simply abandon legacy systems and re-develop new systems based on new technology is not the choice. Migrating legacy system toward new emerging technology is an appropriate solution. However, migrating legacy system towards new technology is a complex system engineering work. In this paper, we propose a novel approach to reduce the migration complexity. We apply dynamic program analysis, software visualization, knowledge recovery, and divide-and-conquer techniques to cope with the complexity issue in legacy software migration project.},
author = {Wu, Lei Wu Lei and Sahraoui, H. and Valtchev, P.},
doi = {10.1109/ICECCS.2005.29},
file = {:D$\backslash$:/Users/Patrick/Desktop/IRP/01467942.pdf:pdf},
isbn = {0-7695-2284-X},
journal = {10th IEEE International Conference on Engineering of Complex Computer Systems (ICECCS'05)},
keywords = {architecture recover,business logic,decomposition algorithm,fuzzy prioritization,legacy software,migration complexity},
title = {{Coping with legacy system migration complexity}},
year = {2005}
}
